[{
  "_id": {
    "$oid": "65cadf2d8fb422ed7b83a08b"
  },
  "workshopGroupId": "idiomatic-reactive-data-streams",
  "name": "Page",
  "sortId": 0,
  "pageType": "PAGE",
  "lastUpdated": {
    "$date": "2024-02-13T03:17:01.473Z"
  },
  "html": "[{\"blockId\":\"eftkta822ke\",\"sortIndex\":0,\"dataClean\":\"Embracing Idiomatic Reactive Data Streams with Angular and RxJS\"},{\"blockId\":\"n4wmmnwvper\",\"sortIndex\":1,\"componentInstanceName\":\"NgxEditorjsImageBlockMediator\",\"dataClean\":\"{\\\"url\\\":\\\"https://ngx-workshop.io/assets/img/Idiomatic_Reactive_Data_Streams.webp\\\",\\\"title\\\":\\\"Test\\\"}\"},{\"blockId\":\"edydyj2dje\",\"sortIndex\":3,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Introduction to Angular and Reactive Programming with RxJS\",\"savedAction\":\"h1\"},{\"blockId\":\"p9ehdykb5w\",\"sortIndex\":4,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"Welcome to our comprehensive workshop designed to introduce and deepen your understanding of idiomatic reactive data streams utilizing Angular and RxJS. Angular, a platform and framework for building single-page client applications, incorporates a reactive programming style that is both robust and scalable. Coupled with RxJS, a library for asynchronous programming and stream manipulation, Angular provides a powerful suite of tools for modern web development.\"},{\"blockId\":\"wav5filoh3\",\"sortIndex\":5,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"The Foundation of Angular: MVVM Architecture\",\"savedAction\":\"h2\"},{\"blockId\":\"4ibjylwh4gt\",\"sortIndex\":6,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"Angular's architectural approach, inspired by the Model-View-ViewModel (MVVM) pattern, facilitates a clear separation of concerns within applications. This architecture not only promotes maintainability but also enhances the scalability of applications by dividing the application logic, user interface, and data model. Angular's commitment to reactivity ensures that your applications remain responsive and performant, adapting seamlessly to user interactions and data changes.\"},{\"blockId\":\"c0s0ptychzo\",\"sortIndex\":7,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"RxJS: The Backbone of Angular's Reactivity\",\"savedAction\":\"h2\"},{\"blockId\":\"2o38xsmbh6e\",\"sortIndex\":8,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"RxJS plays a pivotal role in Angular's ecosystem by offering a comprehensive set of operators and functions to manage asynchronous events and data streams. The library's capabilities allow developers to elegantly handle complex data flows, orchestrate asynchronous operations, and implement sophisticated event handling mechanisms, all within a reactive paradigm.\"},{\"blockId\":\"a82j13ng7v4\",\"sortIndex\":9,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Getting Started: Initial Exploration\"},{\"blockId\":\"bzqtpetfz9j\",\"sortIndex\":10,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"In the initial phase of our workshop, specifically within the 1-lab-start branch, we introduce a foundational example through the AppComponent. This component serves as the initial touchpoint, demonstrating Angular's reactive capabilities in a simplified context.\"},{\"blockId\":\"s0nxkc2iojd\",\"sortIndex\":11,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"// app.component.ts\\nimport { Component } from '@angular/core';\\nimport { CommonModule } from '@angular/common';\\n\\n@Component({\\n  selector: 'app-root',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n  <h1>{{ title }}</h1>\\n  `,\\n})\\nexport class AppComponent {\\n  title = 'Idiomatic Reactive Data Streams';\\n}\\n\",\"savedAction\":\"text/typescript\"},{\"blockId\":\"91jt8alhj6w\",\"sortIndex\":12,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Delving into Reactive Programming Principles\",\"savedAction\":\"h2\"},{\"blockId\":\"2lj3fkjfnvu\",\"sortIndex\":13,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"The journey begins with understanding the basics of Angular's template syntax and its integration with reactive programming concepts. The simple data binding showcased here paves the way for more complex reactive interactions, which will be explored as we progress through the workshop.\"},{\"blockId\":\"9b71ksgv9ff\",\"sortIndex\":14,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Key Insights and Best Practices\",\"savedAction\":\"h2\"},{\"blockId\":\"pfac2v8zkyq\",\"sortIndex\":15,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<ul><li><b>Leveraging MVVM:</b> Angular's adoption of the MVVM pattern is critical for structuring applications that are both manageable and scalable. Embracing this pattern will facilitate better state management and UI/data separation.<br><br></li><li><b>Mastering RxJS: </b>Familiarity with RxJS operators is essential for effective reactive programming. Operators such as map, filter, and combineLatest are fundamental tools for data stream manipulation.<br><br></li><li><b>Utilizing Async Pipe: </b>The async pipe is a cornerstone of Angular's reactivity, simplifying subscription management and preventing memory leaks by automatically subscribing to and unsubscribing from Observables.</li></ul>\"},{\"blockId\":\"ggs0zfn0rnt\",\"sortIndex\":16,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"This workshop is designed to equip you with the knowledge and skills necessary to harness the full potential of Angular and RxJS in building reactive applications. As we move forward, each lab will build upon the last, incrementally increasing in complexity and introducing more advanced concepts and techniques.\"},{\"blockId\":\"nax75ko9whm\",\"sortIndex\":17,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"We look forward to guiding you through this journey into idiomatic reactive programming with Angular and RxJS.\"},{\"blockId\":\"db1omzltrke\",\"sortIndex\":2,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"<i>This workshop is an invitation to explore the reactive programming paradigm within the Angular framework, offering both foundational knowledge and advanced techniques. We encourage an inquisitive approach, experimentation, and continuous learning as key components of your development journey.</i><div><br></div><div><b>Reference Material:</b><br><div><ul><li><a href=\\\"https://github.com/Ba5ik7/workshop-reactive-data-streams/tree/1-lab-complete\\\">Workshop Lab Repo</a></li></ul><div>After cloning the repo checkout the branch <b>1-lab-start.</b></div></div></div>\"}]",
  "__v": 0
},{
  "_id": {
    "$oid": "65caefa58fb422ed7b83a0a8"
  },
  "workshopGroupId": "idiomatic-reactive-data-streams",
  "name": "Page 2",
  "sortId": 1,
  "pageType": "PAGE",
  "lastUpdated": {
    "$date": "2024-02-13T04:27:17.638Z"
  },
  "html": "[{\"blockId\":\"eftkta822ke\",\"sortIndex\":0,\"dataClean\":\"Introduction to RxJS Observables and Async Pipe\"},{\"blockId\":\"u1sy9msbjrf\",\"sortIndex\":1,\"componentInstanceName\":\"NgxEditorjsImageBlockMediator\",\"dataClean\":\"{\\\"url\\\":\\\"https://ngx-workshop.io/assets/img/1.a-lab.webp\\\",\\\"title\\\":\\\"DALL-E\\\"}\"},{\"blockId\":\"rs91jq2znif\",\"sortIndex\":2,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"<b>Objective:&nbsp;</b><span style=\\\"color: var(--mat-sidenav-content-text-color); letter-spacing: 0.0178571em;\\\"><i>Participants will learn to create basic observables with RxJS and utilize the async pipe in Angular for subscribing to these observables in templates.</i></span>\"},{\"blockId\":\"cvzzgfrxodf\",\"sortIndex\":3,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Introduction to RxJS Observables\"},{\"blockId\":\"42j7w7r7cdr\",\"sortIndex\":4,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"Observables are the foundational building blocks in RxJS, representing data streams that can emit multiple values over time. In this lab, we'll explore two primary ways to create observables:<div><br><div><ul><li><code class=\\\"inline-code-example\\\">of</code> <b>Function</b>: Creates an observable that emits the values you provide as arguments, then completes.<br><br></li><li><code class=\\\"inline-code-example\\\">from</code> <b>Function</b>: Converts various other objects and data types into observables. For example, it can convert an array, a promise, or an iterable into an observable.<br><br></li></ul></div><div></div></div>\"},{\"blockId\":\"1j2kykytf3w\",\"sortIndex\":5,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Utilizing the Async Pipe in Angular\",\"savedAction\":\"h2\"},{\"blockId\":\"jxefpkdu8fh\",\"sortIndex\":6,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"The async pipe is a powerful Angular feature that allows you to subscribe to observables directly from your templates. It handles subscription management automatically, subscribing to the observable when the component loads and unsubscribing when the component is destroyed, thus preventing potential memory leaks.<div><br></div>\"},{\"blockId\":\"bn17ytyjdn5\",\"sortIndex\":7,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Hands-on Exercise: Creating and Displaying Observables\"},{\"blockId\":\"xomdw5iseo\",\"sortIndex\":8,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"<b>Create Simple Observables:&nbsp;</b><div><ul><li>Use the <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">of</code> function to create an observable from the <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">title</code> string. This observable will emit a single value - the title string.<br><br></li><li>Use the <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">from</code> function to create an observable from the same <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">title</code> string. This will create an observable that emits each character of the string individually.</li></ul><div><br><b>Modify the Component Template:</b><br><div><ul><li>Update the component template to display the values emitted by these observables using the async pipe.</li></ul></div></div></div>\"},{\"blockId\":\"655hgmte1sk\",\"sortIndex\":9,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"\"},{\"blockId\":\"s3dz0opdhb8\",\"sortIndex\":10,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Step-by-Step Instructions:\",\"savedAction\":\"h2\"},{\"blockId\":\"m7e2naws8mn\",\"sortIndex\":11,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"title$ = of(this.title);\",\"savedAction\":\"text/typescript\"},{\"blockId\":\"f79shc7h60t\",\"sortIndex\":12,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<div style=\\\"text-align: left;\\\"><ul><li>This line creates an observable that emits the value of this.title and then completes.</li></ul></div>\"},{\"blockId\":\"99347sguact\",\"sortIndex\":13,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"titles$ = from(this.title);\",\"savedAction\":\"text/typescript\"},{\"blockId\":\"phqm0nve3xn\",\"sortIndex\":14,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<ul><li>This line creates an observable that emits each character of this.title string as individual emissions.</li></ul>\"},{\"blockId\":\"vx4t8jmfn5s\",\"sortIndex\":15,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Updating the Template:\",\"savedAction\":\"h2\"},{\"blockId\":\"ljitw8wrve\",\"sortIndex\":16,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<ul><li>Use the async pipe to subscribe to these observables in the template and display the emitted values.</li></ul>\"},{\"blockId\":\"8ghkin512b6\",\"sortIndex\":17,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"<h1>{{ title$ | async }}</h1>\\n<h1>{{ titles$ | async }}</h1>\",\"savedAction\":\"xml\"},{\"blockId\":\"3rodvpwsxmx\",\"sortIndex\":18,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Discussion Points:\",\"savedAction\":\"h2\"},{\"blockId\":\"fnq22h0xqew\",\"sortIndex\":19,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<ul><li>Discuss the difference between of and from and when to use each.<br><br></li><li>Explore how the async pipe simplifies observables' subscription management in Angular templates.</li></ul><div><br></div>\"},{\"blockId\":\"ktft9486vrs\",\"sortIndex\":20,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Further Exploration:\",\"savedAction\":\"h2\"},{\"blockId\":\"v917tofx0is\",\"sortIndex\":21,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<ul><li>Experiment with transforming the data emitted by the observables using RxJS operators like map or filter before displaying them in the template.<br><br></li><li>Investigate the behavior of the async pipe when used with different types of observables and data streams.</li></ul>\"},{\"blockId\":\"qo8wmtf6sy\",\"sortIndex\":22,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"This lab provides a practical introduction to the creation and use of observables in Angular applications, laying the groundwork for more complex reactive programming techniques in subsequent modules.\"},{\"blockId\":\"6iqf7gkbmzw\",\"sortIndex\":23,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"\"}]",
  "__v": 0
},{
  "_id": {
    "$oid": "65cb02798fb422ed7b83a136"
  },
  "workshopGroupId": "idiomatic-reactive-data-streams",
  "name": "Page 3",
  "sortId": 2,
  "pageType": "PAGE",
  "lastUpdated": {
    "$date": "2024-02-13T05:47:37.083Z"
  },
  "html": "[{\"blockId\":\"eftkta822ke\",\"sortIndex\":0,\"dataClean\":\"Enhancing Observables with RxJS Operators\"},{\"blockId\":\"rpnxyik09ti\",\"sortIndex\":1,\"componentInstanceName\":\"NgxEditorjsImageBlockMediator\",\"dataClean\":\"{\\\"url\\\":\\\"https://ngx-workshop.io/assets/img/1.b-lab.webp\\\",\\\"title\\\":\\\"DALL-E\\\"}\"},{\"blockId\":\"z72h3ggwiw\",\"sortIndex\":2,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"<b>Objective:</b>&nbsp;<span style=\\\"color: var(--mat-sidenav-content-text-color); letter-spacing: 0.0178571em;\\\"><i>Participants will gain hands-on experience in applying RxJS operators to transform and debug observables, showcasing the versatility and power of reactive programming within Angular applications.</i></span>\"},{\"blockId\":\"powgf1ulaso\",\"sortIndex\":3,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Introduction to RxJS Operators\"},{\"blockId\":\"zilwwzt45w\",\"sortIndex\":4,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<div><br></div><div>RxJS operators are functions that allow you to manipulate the items emitted by observables in various ways, such as transforming values, filtering streams, or combining multiple observables. In this lab, we focus on three operators:</div><div><br></div><div><ul><li><code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">map</code> <b>Operator</b>: Transforms each value emitted by an observable by applying a function to each item.<br><br></li><li><code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">tap</code> <b>Operator</b>: Performs a side effect for every emission on the source Observable but returns an Observable that is identical to the source.<br><br></li><li><code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">toArray</code> <b>Operator</b>: Collects all source emissions and emits them as an array when the source completes.</li></ul></div>\"},{\"blockId\":\"8i4gk8xlpi8\",\"sortIndex\":5,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Hands-on Exercise: Transforming and Debugging Data Streams\",\"savedAction\":\"h2\"},{\"blockId\":\"bcfx5728c9\",\"sortIndex\":8,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<b>1) Applying map to Transform Values:</b>\"},{\"blockId\":\"ofr3wsebrkl\",\"sortIndex\":6,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"<span style=\\\"letter-spacing: 0.249999px;\\\"><b>Transform Data with <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">map</code>:</b></span><div><ul><li><span style=\\\"letter-spacing: 0.249999px;\\\">Apply the <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">map</code> operator to transform the title string to uppercase.</span></li></ul><div><span style=\\\"letter-spacing: 0.249999px;\\\"><b>Debugging with <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">tap</code>:</b></span></div></div><div><ul><li><span style=\\\"letter-spacing: 0.249999px;\\\">Use the <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">tap</code> operator to log each character emitted by the observable created with from.</span></li></ul><div><span style=\\\"letter-spacing: 0.249999px;\\\"><b>Aggregating Stream Values with <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">toArray</code>:</b></span></div></div><div><ul><li><span style=\\\"letter-spacing: 0.249999px;\\\">Combine the individual characters emitted back into a single string using <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">toArray</code> and <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">map</code>.</span></li></ul></div>\"},{\"blockId\":\"089t382qbmdn\",\"sortIndex\":7,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Step-by-Step Instructions:\",\"savedAction\":\"h2\"},{\"blockId\":\"9cabjnb0brh\",\"sortIndex\":9,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"title$ = of(this.title).pipe(\\n  map((title) => title.toUpperCase())\\n);\",\"savedAction\":\"text/typescript\"},{\"blockId\":\"6qbhw0tfzts\",\"sortIndex\":10,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<b>2) Using <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">tap</code> for Side Effects:</b>\"},{\"blockId\":\"g434ycn537\",\"sortIndex\":11,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"titles$ = from(this.title).pipe(\\n  tap(console.log), // Logs each character emitted by the observable\\n  toArray(), // Collects all emissions into an array\\n  map((titles) => titles.join('')) // Joins the array elements into a string\\n);\",\"savedAction\":\"text/typescript\"},{\"blockId\":\"hqusgkzkdpj\",\"sortIndex\":12,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<b>3) Updating the Component Template:<br><ul><li>Display the transformed data in the template using the async pipe.</li></ul></b>\"},{\"blockId\":\"ew4syky89pc\",\"sortIndex\":13,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"<h1>{{ title$ | async }}</h1>\\n<h1>{{ titles$ | async }}</h1>\",\"savedAction\":\"xml\"},{\"blockId\":\"8hda77veff8\",\"sortIndex\":14,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Discussion Points:\",\"savedAction\":\"h2\"},{\"blockId\":\"91l7xuujhif\",\"sortIndex\":15,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<ul><li>Explore how <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">map</code> can be used to perform any operation on the items emitted by an observable.<br><br></li><li>Discuss the utility of <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">tap</code> for debugging observables without affecting the data stream.<br><br></li><li>Understand the use of toArray in aggregating stream emissions and its implications on observable completion.</li></ul>\"},{\"blockId\":\"fj6zejrrqcv\",\"sortIndex\":16,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Further Exploration:\",\"savedAction\":\"h2\"},{\"blockId\":\"8qhvirhfc1\",\"sortIndex\":17,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<ul><li>Experiment with other RxJS operators to perform different transformations and manipulations on data streams.<br><br></li><li>Consider scenarios where aggregating stream values would be useful in real-world applications.</li></ul>\"},{\"blockId\":\"uk1svqhe4v8\",\"sortIndex\":18,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"This lab emphasizes the flexibility and power of RxJS within Angular applications, providing participants with practical experience in data stream manipulation and debugging.\"}]",
  "__v": 0
},{
  "_id": {
    "$oid": "65cb04ea8fb422ed7b83a13f"
  },
  "workshopGroupId": "idiomatic-reactive-data-streams",
  "name": "Page 4",
  "sortId": 3,
  "pageType": "PAGE",
  "lastUpdated": {
    "$date": "2024-02-13T05:58:02.181Z"
  },
  "html": "[{\"blockId\":\"eftkta822ke\",\"sortIndex\":0,\"dataClean\":\"Workshop Module: Combining Multiple Observables with combineLatest\"},{\"blockId\":\"shqinqy3ohe\",\"sortIndex\":1,\"componentInstanceName\":\"NgxEditorjsImageBlockMediator\",\"dataClean\":\"{\\\"url\\\":\\\"https://ngx-workshop.io/assets/img/1.c-lab.webp\\\",\\\"title\\\":\\\"DALLE\\\"}\"},{\"blockId\":\"lsaidvf4oi\",\"sortIndex\":2,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"<b>Objective:&nbsp;</b><i style=\\\"color: var(--mat-sidenav-content-text-color); letter-spacing: 0.0178571em;\\\">Participants will learn to use the combineLatest function to combine multiple observables into one, demonstrating how to work with multiple streams of data reactively.</i>\"},{\"blockId\":\"ch7ck3cpsf\",\"sortIndex\":3,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Introduction to combineLatest\"},{\"blockId\":\"olllzppqro\",\"sortIndex\":4,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"combineLatest is an RxJS function that takes multiple observables as input and generates a new observable that emits an array of the latest values from each input observable whenever any input observable emits a value. This is particularly useful in scenarios where you need to perform operations or update the UI based on the latest values from multiple data sources.\"},{\"blockId\":\"tqbuk57csy\",\"sortIndex\":5,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Hands-on Exercise: Creating a Combined Data Model\",\"savedAction\":\"h2\"},{\"blockId\":\"p6p2azbap5\",\"sortIndex\":6,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"<b>Combine Observables:</b><div><ul><li>Use <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">combineLatest</code> to combine the <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">title$</code> and <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">titles$</code> observables into a single observable stream.</li></ul><div><b>Map to a ViewModel:</b></div></div><div><ul><li>Apply the <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">map</code> operator to transform the combined array of latest values into a single object, suitable for consumption by the component template.</li></ul></div>\"},{\"blockId\":\"pm0rwum32y\",\"sortIndex\":7,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Step-by-Step Instructions:\",\"savedAction\":\"h2\"},{\"blockId\":\"ixvn837okm\",\"sortIndex\":8,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<b>1) Combining Observables with combineLatest:</b>\"},{\"blockId\":\"xqz44znl5rs\",\"sortIndex\":9,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"viewModel$ = combineLatest([this.title$, this.titles$]).pipe(\\n  map(([title, titles]) => ({ title, titles }))\\n);\",\"savedAction\":\"text/typescript\"},{\"blockId\":\"nlzaegmqbkt\",\"sortIndex\":10,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<b>2) Updating the Component Template:</b><div><ul><li>Use the Angular's structural directive *ngIf with the async pipe to unwrap the combined observable and access the title and titles properties.</li></ul></div>\"},{\"blockId\":\"o2fhnvmze9o\",\"sortIndex\":11,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"@if(viewModel$ | async as vm) {\\n  <h1>{{ vm.title }}</h1>\\n  <h2>{{ vm.titles }}</h2>\\n}\",\"savedAction\":\"xml\"},{\"blockId\":\"zblyjil7gbi\",\"sortIndex\":12,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Discussion Points:\",\"savedAction\":\"h2\"},{\"blockId\":\"9peick20vlv\",\"sortIndex\":13,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<ul><li>Discuss the behavior of combineLatest and how it differs from other combination strategies like forkJoin or zip.<br><br></li><li>Explore the importance of mapping combined streams into view models to simplify template integration.</li></ul>\"},{\"blockId\":\"ad2sqccg0z\",\"sortIndex\":14,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Further Exploration:\",\"savedAction\":\"h2\"},{\"blockId\":\"vt54h1jzzr\",\"sortIndex\":15,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<ul><li>Challenge participants to include additional observables in the combination, such as data from another service or user input streams.<br><br></li><li>Discuss strategies for handling errors and incomplete streams when using combineLatest.</li></ul>\"},{\"blockId\":\"ktzuc86b9ae\",\"sortIndex\":16,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"This lab showcases the versatility of RxJS for managing complex data dependencies in Angular applications, providing participants with a practical understanding of combining and mapping multiple data streams.\"}]",
  "__v": 0
},{
  "_id": {
    "$oid": "65cb06248fb422ed7b83a146"
  },
  "workshopGroupId": "idiomatic-reactive-data-streams",
  "name": "Page 5",
  "sortId": 4,
  "pageType": "PAGE",
  "lastUpdated": {
    "$date": "2024-02-13T06:03:16.486Z"
  },
  "html": "[{\"blockId\":\"eftkta822ke\",\"sortIndex\":0,\"dataClean\":\"Integrating Angular Services and Reactive State Management\"},{\"blockId\":\"495bn5ycfmt\",\"sortIndex\":1,\"componentInstanceName\":\"NgxEditorjsImageBlockMediator\",\"dataClean\":\"{\\\"url\\\":\\\"https://ngx-workshop.io/assets/img/1-lab-complete.webp\\\",\\\"title\\\":\\\"DALL-E\\\"}\"},{\"blockId\":\"0gv5jlbf1vh\",\"sortIndex\":2,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"<b>Objective:</b>&nbsp;<i style=\\\"color: var(--mat-sidenav-content-text-color); letter-spacing: 0.0178571em;\\\">Participants will learn to integrate Angular services into components, use combineLatest to combine data streams from services, and update data reactively using BehaviorSubjects.</i>\"},{\"blockId\":\"ub6pgvjubb\",\"sortIndex\":3,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Introduction to Angular Services and BehaviorSubject\"},{\"blockId\":\"16wxwho7rss\",\"sortIndex\":4,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"Angular services are singleton objects that provide a method to encapsulate and share logic, data, or functions across components. BehaviorSubject is a type of Subject in RxJS that requires an initial value and emits its current value to new subscribers. It's particularly useful for representing \\\"values over time\\\" in your application.\"},{\"blockId\":\"2vd7941f3ql\",\"sortIndex\":5,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Hands-on Exercise: Building a Reactive User Interface with Services\",\"savedAction\":\"h2\"},{\"blockId\":\"4xsu18onlx9\",\"sortIndex\":6,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"<b>Integrate ContentService:</b><div><ul><li><span style=\\\"color: var(--mat-sidenav-content-text-color); letter-spacing: 0.0178571em;\\\">Inject ContentService into the AppComponent and use it to provide reactive data streams.</span></li></ul><div><span style=\\\"letter-spacing: 0.249999px;\\\"><b>Combine Service Data Streams:</b></span></div></div><div><ul><li><span style=\\\"letter-spacing: 0.249999px;\\\">Use combineLatest to combine multiple BehaviorSubjects from ContentService into a single observable stream.</span></li></ul><div><span style=\\\"letter-spacing: 0.249999px;\\\"><b>Reactive Data Updates:</b></span></div></div><div><ul><li><span style=\\\"letter-spacing: 0.249999px;\\\">Implement a method to update BehaviorSubject values within ContentService, reflecting changes reactively in the component.</span></li></ul></div>\"},{\"blockId\":\"pxgkacaeikb\",\"sortIndex\":7,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Step-by-Step Instructions:\",\"savedAction\":\"h2\"},{\"blockId\":\"0yoq84w0a97n\",\"sortIndex\":21,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"\"},{\"blockId\":\"8eamdkuqug\",\"sortIndex\":8,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<b>1) Injecting ContentService and Combining Streams:</b>\"},{\"blockId\":\"si1yt1jum69\",\"sortIndex\":9,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"contentService = inject(ContentService);\\n\\nviewModel$ = combineLatest([\\n  this.contentService.title$,\\n  this.contentService.titles$,\\n  this.contentService.body$\\n]).pipe(\\n  map(([title, titles, body]) => ({ title, titles, body }))\\n);\",\"savedAction\":\"text/typescript\"},{\"blockId\":\"ai99uu10tlc\",\"sortIndex\":10,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<b>2) Updating the Component Template:</b><div><ul><li>Utilize the async pipe to manage the subscription to viewModel$, displaying the title, titles, and body in the component's template.<br><br></li><li>Add a button to trigger updates to the reactive data streams.</li></ul></div>\"},{\"blockId\":\"33unevz4wdc\",\"sortIndex\":11,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"<button (click)=\\\"updateValue()\\\">Update Title and Body values</button>\",\"savedAction\":\"xml\"},{\"blockId\":\"ag1lw5f14ve\",\"sortIndex\":12,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<b>3) Implementing BehaviorSubject in ContentService:</b><div><ul><li><b>BehaviorSubject Multicast Nature:&nbsp;</b><span style=\\\"color: var(--mat-sidenav-content-text-color); letter-spacing: 0.0178571em;\\\">BehaviorSubject is a type of Subject in RxJS that can multicast, meaning it can emit the same value to multiple subscribers. This is particularly useful in scenarios where you need to ensure consistent state across different parts of your application that are all observing the same data source.<br><br></span></li><li><b>Benefits of asObservable():&nbsp;</b><span style=\\\"color: var(--mat-sidenav-content-text-color); letter-spacing: 0.0178571em;\\\">When exposing BehaviorSubject from a service, it's a best practice to use asObservable() to convert it into an Observable. This approach encapsulates the subject, preventing external parts of the application from emitting new values to the subject directly, thus maintaining control over the data stream and ensuring the data integrity by adhering to the principle of least privilege.</span></li></ul></div>\"},{\"blockId\":\"6u1ujmlpokp\",\"sortIndex\":13,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"body = new BehaviorSubject<string>('BehaviorSubject: This is a type of subject, a special type of observable, that allows multicasting to multiple observers.');\\nbody$ = this.body.asObservable();\",\"savedAction\":\"text/typescript\"},{\"blockId\":\"a9ieriqiez8\",\"sortIndex\":14,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<b>4) Demonstrating Reactive Updates:</b><div><ul><li>Emphasize that changes to title (used in of) are not reflected in the view, underscoring the completion behavior of <code _ngcontent-ng-c3366709071=\\\"\\\" class=\\\"inline-code-example\\\">of</code>.<br><br></li><li>Show how updates to body via BehaviorSubject.next() are immediately reflected, demonstrating the reactive nature of BehaviorSubject.</li></ul></div>\"},{\"blockId\":\"2xy95nn0b7v\",\"sortIndex\":15,\"componentInstanceName\":\"NgxEditorjsCodeBlockMediator\",\"dataClean\":\"updateValue() {\\n  this.contentService.title = 'Unchanged Title'; // Attempt to update title\\n  this.contentService.body.next('Updated Body Content!'); // Update body content\\n}\",\"savedAction\":\"text/typescript\"},{\"blockId\":\"6rf0akqi4vf\",\"sortIndex\":20,\"componentInstanceName\":\"NgxEditorjsBlockquotesBlockMediator\",\"dataClean\":\"This lab completes the journey through reactive programming in Angular, providing a comprehensive understanding of how to build dynamic, responsive user interfaces using Angular services, RxJS, and reactive patterns.\"},{\"blockId\":\"fp176mnnw05\",\"sortIndex\":16,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Discussion Points:\",\"savedAction\":\"h2\"},{\"blockId\":\"5diuz2wdn4c\",\"sortIndex\":17,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<ul><li>Explore the benefits of using services for state management in Angular applications.<br><br></li><li>Discuss the role of BehaviorSubject for representing and updating data streams reactively.<br><br></li><li>Discuss the implications of observable completion on data binding and reactivity in Angular templates.<br><br></li><li>Explore scenarios where of is useful versus the dynamic capabilities required from BehaviorSubject.</li></ul>\"},{\"blockId\":\"peannesmjxk\",\"sortIndex\":18,\"componentInstanceName\":\"NgxEditorjsHeaderBlockMediator\",\"dataClean\":\"Further Exploration:\",\"savedAction\":\"h2\"},{\"blockId\":\"9xwzjil8zg\",\"sortIndex\":19,\"componentInstanceName\":\"NgxEditorjsParagraphBlockMediator\",\"dataClean\":\"<ul><li>Encourage participants to extend the ContentService by adding new data streams and combining them in the component.<br><br></li><li>Discuss strategies for optimizing reactive data flow in larger applications, considering aspects like error handling, loading states, and unsubscribing from streams.<br><br></li><li>Encourage participants to experiment with other RxJS subjects like ReplaySubject and Subject to understand their behaviors and use cases.<br><br></li><li>Discuss strategies for managing and propagating state changes in larger applications, considering performance and complexity.</li></ul>\"}]",
  "__v": 0
}]